import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import '../provider/filter_provider.dart';
import '../provider/filter_theme_provider.dart';
import '../provider/region_count_provider.dart';
import '../provider/search_theme_provider.dart';

class FilterRowWidget extends StatefulWidget {
  final double height;
  final double horizontalPadding;
  final double iconSize;
  final double fontSize;
  final Color fontColor;
  final FontWeight fontWeight;

  const FilterRowWidget({
    super.key,
    this.height = 29.0,
    this.horizontalPadding = 12.0,
    this.iconSize = 24.0,
    this.fontSize = 13.0,
    this.fontColor = Colors.white,
    this.fontWeight = FontWeight.normal,
  });

  @override
  _FilterRowWidgetState createState() => _FilterRowWidgetState();
}

class _FilterRowWidgetState extends State<FilterRowWidget> {
  bool _isHorrorSelected = false;
  bool _isActivitySelected = false;

  String? _selectedRegion;
  String? _selectedDifficulty;
  void _toggleHorror() async {
    setState(() {
      _isHorrorSelected = !_isHorrorSelected;
    });

    final filterProvider = Provider.of<FilterProvider>(context, listen: false);
    filterProvider.setHorror(_isHorrorSelected ? 1 : 0); // üî• Ïó¨Í∏∞ Ï∂îÍ∞Ä
    final filterThemeProvider =
        Provider.of<FilterThemeProvider>(context, listen: false);
    await filterThemeProvider.fetchFilteredThemes(filterProvider);
    final searchThemeProvider =
        Provider.of<SearchThemeProvider>(context, listen: false);
    await searchThemeProvider.searchThemes(
        date: searchThemeProvider.selectedDate, filterProvider: filterProvider);
  }

  void _toggleActivity() async {
    setState(() {
      _isActivitySelected = !_isActivitySelected;
    });

    final filterProvider = Provider.of<FilterProvider>(context, listen: false);
    filterProvider.setActivity(_isActivitySelected ? 1 : 0); // üî• Ïó¨Í∏∞ Ï∂îÍ∞Ä
    final filterThemeProvider =
        Provider.of<FilterThemeProvider>(context, listen: false);
    await filterThemeProvider.fetchFilteredThemes(filterProvider);
    final searchThemeProvider =
        Provider.of<SearchThemeProvider>(context, listen: false);
    await searchThemeProvider.searchThemes(
        date: searchThemeProvider.selectedDate, filterProvider: filterProvider);
  }

  void _showRegionBottomSheet(BuildContext context) async {
    final result = await showModalBottomSheet<String>(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.black,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) => const SafeArea(child: RegionBottomSheet()),
    );

    if (result != null) {
      setState(() {
        _selectedRegion = result;
      });
    }
  }

  void _showDifficultyBottomSheet(BuildContext context) async {
    final result = await showModalBottomSheet<String>(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => const DifficultyBottomSheet(),
    );

    if (result != null) {
      setState(() {
        _selectedDifficulty = result;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Row(
      children: [
        Expanded(
          child: SingleChildScrollView(
            scrollDirection: Axis.horizontal,
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                const SizedBox(width: 5),
                GestureDetector(
                    onTap: () {
                      _showRegionBottomSheet(context);
                    },
                    child: _buildDropdownButton('Ï†ÑÍµ≠', _selectedRegion, 0)),
                const SizedBox(width: 5),
                GestureDetector(
                    onTap: () => _showDifficultyBottomSheet(context),
                    child: _buildDropdownButton('ÎÇúÏù¥ÎèÑ', _selectedDifficulty, 1)),
                const SizedBox(width: 5),
                _buildIconTextButton(
                  'Í≥µÌè¨ÎèÑ',
                  'assets/icon/ghost_no.png',
                  _isHorrorSelected,
                  _toggleHorror,
                ),
                const SizedBox(width: 5),
                _buildIconTextButton(
                  'ÌôúÎèôÏÑ±',
                  'assets/icon/shoe_no.png',
                  _isActivitySelected,
                  _toggleActivity,
                ),
                const SizedBox(width: 10),
                // Icon(
                //   Icons.menu,
                //   size: 30,
                //   color: Colors.white,
                // ),
                GestureDetector(
                    onTap: () async {
                      final filterProvider =
                          Provider.of<FilterProvider>(context, listen: false);
                      final filterThemeProvider =
                          Provider.of<FilterThemeProvider>(context,
                              listen: false);
                      debugPrint(
                          'FilterProvider: ${filterProvider.horror}, ${filterProvider.activity}, ${filterProvider.region}, ${filterProvider.levelMin}, ${filterProvider.levelMax}');
                      await filterThemeProvider
                          .fetchFilteredThemes(filterProvider);
                      debugPrint(
                          'Filtered themes: ${filterThemeProvider.filteredThemes}');
                      final searchThemeProvider =
                          Provider.of<SearchThemeProvider>(context,
                              listen: false);
                      await searchThemeProvider.searchThemes(
                          date: searchThemeProvider.selectedDate,
                          filterProvider: filterProvider);
                    },
                    child: _buildCircleIconButton('assets/button/filter.png'))
              ],
            ),
          ),
        ),
        // _buildCircleIconButton('assets/button/filter.png'),
      ],
    );
  }

  Widget _buildDropdownButton(
      String defaultLabel, String? selectedValue, int num) {
    debugPrint('selected :  $selectedValue');
    final isSelected = selectedValue != null &&
        selectedValue != 'Ï†ÑÏ≤¥' &&
        selectedValue != 'ÎÇúÏù¥ÎèÑ';
    return SafeArea(
      child: Container(
        height: widget.height,
        padding: const EdgeInsets.only(left: 7, right: 10),
        decoration: BoxDecoration(
          color: isSelected ? Colors.white : Colors.transparent,
          border: Border.all(color: isSelected ? Colors.black : Colors.white),
          borderRadius: BorderRadius.circular(30),
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.start,
          children: [
            num == 1
                ? Image.asset(
                    'assets/icon/puzzle_red.png',
                    width: 16,
                    color: isSelected ? Colors.black : Colors.white,
                  )
                : const SizedBox.shrink(),
            const SizedBox(width: 3),
            Text(
              selectedValue ?? defaultLabel,
              style: TextStyle(
                color: isSelected ? Colors.black : Colors.white,
                fontSize: widget.fontSize,
                fontWeight: widget.fontWeight,
              ),
            ),
            num == 0
                ? Icon(Icons.arrow_drop_down,
                    color: isSelected ? Colors.black : Colors.white, size: 16)
                : const SizedBox.shrink(),
          ],
        ),
      ),
    );
  }

  Widget _buildIconTextButton(
    String text,
    String iconPath,
    bool isSelected,
    VoidCallback onTap,
  ) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        height: widget.height,
        padding: EdgeInsets.symmetric(horizontal: widget.horizontalPadding),
        decoration: BoxDecoration(
          color: isSelected ? Colors.white : Colors.transparent,
          border: Border.all(color: Colors.white),
          borderRadius: BorderRadius.circular(30),
        ),
        child: Center(
          child: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              Image.asset(
                iconPath,
                width: widget.iconSize,
                height: widget.iconSize,
                color: isSelected ? Colors.black : Colors.white,
              ),
              const SizedBox(width: 7),
              Text(
                text,
                style: TextStyle(
                  color: isSelected ? Colors.black : widget.fontColor,
                  fontSize: widget.fontSize,
                  fontWeight: widget.fontWeight,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildCircleIconButton(String iconPath, {VoidCallback? onTap}) {
    return SizedBox(
      width: 27,
      height: 27,
      child: IconButton(
        icon: Image.asset(
          iconPath,
          fit: BoxFit.contain,
        ),
        iconSize: widget.iconSize,
        onPressed: onTap, // üëâ onTapÏùÑ Ïó¨Í∏∞Î°ú ÎÑòÍ≤®Ï§å
        padding: EdgeInsets.zero,
      ),
    );
  }
}

// 3. RegionBottomSheet ÏúÑÏ†Ø
class RegionBottomSheet extends StatefulWidget {
  const RegionBottomSheet({super.key});

  @override
  _RegionBottomSheetState createState() => _RegionBottomSheetState();
}

class _RegionBottomSheetState extends State<RegionBottomSheet> {
  int selectedMainIndex = 0;
  String? selectedSubRegion;
  @override
  void initState() {
    super.initState();
    Future.microtask(() {
      Provider.of<RegionCountProvider>(context, listen: false)
          .fetchRegionCounts();
    });
  }

  final List<String> mainRegions = [
    'Ï†ÑÍµ≠',
    'ÏÑúÏö∏',
    'Í≤ΩÍ∏∞/Ïù∏Ï≤ú',
    'Ï∂©Ï≤≠',
    'Í≤ΩÏÉÅ',
    'Ï†ÑÎùº',
    'Ï†úÏ£º',
  ];

  final Map<String, List<String>> subRegions = {
    'Ï†ÑÍµ≠': ['Ï†ÑÏ≤¥'],
    'ÏÑúÏö∏': [
      'Í∞ïÎÇ®',
      'Í±¥ÎåÄ',
      'ÎÖ∏Ïõê',
      'ÏÑ±Ïàò',
      'Ïã†Ï¥å',
      'Ïû†Ïã§',
      'ÌôçÎåÄ',
      'ÏÑ±Ïàò',
      'Ïã†Î¶º',
      'ÌòúÌôî',
      'ÎèôÏûë',
      'Î™ÖÎèô'
    ],
    'Í≤ΩÍ∏∞/Ïù∏Ï≤ú': ['Ï†ÑÏ≤¥', 'ÏàòÏõê', 'ÏïàÏÇ∞', 'ÏïàÏñë', 'Ïù∏Ï≤ú', 'Í≥†Ïñë', 'ÌôîÏÑ±', 'ÌèâÌÉù'],
    'Ï∂©Ï≤≠': ['ÎåÄÏ†Ñ', 'Ï≤úÏïà', 'Ï∂©Ï£º'],
    'Í≤ΩÏÉÅ': ['Î∂ÄÏÇ∞', 'ÎåÄÍµ¨'],
    'Ï†ÑÎùº': ['ÏùµÏÇ∞', 'Ï†ÑÏ£º'],
    'Ï†úÏ£º': ['Ï†úÏ£º', 'ÏÑúÍ∑ÄÌè¨'],
  };

  @override
  Widget build(BuildContext context) {
    final regionProvider = Provider.of<RegionCountProvider>(context);
    final currentSub = subRegions[mainRegions[selectedMainIndex]] ?? [];
    debugPrint('$selectedMainIndex');
    return SafeArea(
      child: SizedBox(
        height: MediaQuery.of(context).size.height * 0.63,
        // height: MediaQuery.of(context).size.width - 80,
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            const SizedBox(
              height: 20,
            ),

            /// Ï†úÎ™© Î∞è Îã´Í∏∞ Î≤ÑÌäº
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Row(
                  children: [
                    SizedBox(
                      width: 12,
                    ),
                    Text("ÏßÄÏó≠",
                        style: TextStyle(
                            color: Colors.white,
                            fontSize: 20,
                            fontWeight: FontWeight.bold)),
                  ],
                ),
                IconButton(
                  padding: const EdgeInsets.only(bottom: 20, right: 25),
                  icon: const Icon(Icons.close, color: Colors.white),
                  alignment: const Alignment(-1, 1),
                  onPressed: () => Navigator.pop(context),
                )
              ],
            ),
            Expanded(
              child: Row(
                children: [
                  // Main region list
                  Expanded(
                    child: ListView.builder(
                      itemCount: mainRegions.length,
                      itemBuilder: (context, index) {
                        final isSelected = selectedMainIndex == index;
                        return GestureDetector(
                          onTap: () =>
                              setState(() => selectedMainIndex = index),
                          child: Container(
                            decoration: BoxDecoration(
                              color: isSelected ? Colors.white : Colors.black,
                              border: const Border(
                                bottom: BorderSide(
                                  width: 0.50,
                                  color: Color(0xFF363636),
                                ),
                              ),
                            ),
                            padding: const EdgeInsets.symmetric(vertical: 16),
                            child: Center(
                              child: Text(
                                mainRegions[index],
                                style: TextStyle(
                                  color: isSelected
                                      ? const Color(0xffD90206)
                                      : Colors.white,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ),
                          ),
                        );
                      },
                    ),
                  ),
                  // Sub region list
                  Expanded(
                    flex: 2,
                    child: ListView.builder(
                      itemCount: currentSub.length,
                      itemBuilder: (context, index) {
                        final sub = currentSub[index];
                        final isSelected = sub == selectedSubRegion;
                        return GestureDetector(
                          onTap: () => setState(() => selectedSubRegion = sub),
                          child: Container(
                            decoration: BoxDecoration(
                              color: isSelected
                                  ? const Color(0xffD90206)
                                  : Colors.black,
                              border: const Border(
                                bottom: BorderSide(
                                  width: 0.50,
                                  color: Color(0xFF363636),
                                ),
                              ),
                            ),
                            padding: const EdgeInsets.symmetric(
                                vertical: 16, horizontal: 12),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Text(
                                  sub,
                                  style: const TextStyle(
                                    color: Colors.white,
                                    fontWeight: FontWeight.w500,
                                  ),
                                ),
                                Consumer<RegionCountProvider>(
                                  builder: (context, provider, _) {
                                    if (mainRegions[selectedMainIndex] ==
                                            'Ï†ÑÍµ≠' &&
                                        sub == 'Ï†ÑÏ≤¥') {
                                      final count = provider.total ?? 0;
                                      return Text(
                                        '$count',
                                        style: const TextStyle(
                                            color: Colors.white),
                                      );
                                    } else {
                                      final count =
                                          provider.getCountByLocation(sub);
                                      debugPrint('count: $count');
                                      return Text(
                                        '$count',
                                        style: const TextStyle(
                                            color: Colors.white),
                                      );
                                    }
                                  },
                                )
                              ],
                            ),
                          ),
                        );
                      },
                    ),
                  ),
                ],
              ),
            ),
            // ‚úÖ ÏßÄÏó≠ ÏÑ†ÌÉù ÏôÑÎ£å Î≤ÑÌäº
            // ‚úÖ ÏßÄÏó≠ ÏÑ†ÌÉù ÏôÑÎ£å Î≤ÑÌäº
            GestureDetector(
              onTap: selectedSubRegion != null
                  ? () async {
                      final region = selectedMainIndex > 0
                          ? (selectedSubRegion != 'Ï†ÑÏ≤¥'
                              ? '$selectedSubRegion'
                              : '${mainRegions[selectedMainIndex]} $selectedSubRegion')
                          : 'Ï†ÑÏ≤¥';

                      final filterProvider =
                          Provider.of<FilterProvider>(context, listen: false);
                      final searchThemeProvider =
                          Provider.of<SearchThemeProvider>(context,
                              listen: false);
                      final filterThemeProvider =
                          Provider.of<FilterThemeProvider>(context,
                              listen: false);

                      filterProvider.setRegion(region == 'Ï†ÑÏ≤¥' ? null : region);
                      !Provider.of<SearchThemeProvider>(context, listen: false)
                              .isSearching
                          ? await filterThemeProvider
                              .fetchFilteredThemes(filterProvider)
                          : await searchThemeProvider.searchThemes(
                              date: searchThemeProvider.selectedDate,
                              filterProvider: filterProvider);
                      Navigator.pop(context, region); // Îã´Í∏∞Îßå Ìï¥ÎèÑ Îê® (Ï†ÅÏö©ÏùÄ Ïò§Î•∏Ï™Ω Î≤ÑÌäºÏóêÏÑú)
                    }
                  : null,
              child: Container(
                width: double.infinity,
                padding: const EdgeInsets.symmetric(vertical: 16),
                alignment: Alignment.center,
                color: selectedSubRegion != null
                    ? const Color(0xffD90206)
                    : const Color(0xff515151),
                child: const Text('ÏÑ†ÌÉù ÏôÑÎ£å',
                    style: TextStyle(
                        color: Colors.white, fontWeight: FontWeight.bold)),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class DifficultyBottomSheet extends StatefulWidget {
  const DifficultyBottomSheet({super.key});

  @override
  _DifficultyBottomSheetState createState() => _DifficultyBottomSheetState();
}

class _DifficultyBottomSheetState extends State<DifficultyBottomSheet> {
  double _startDifficulty = 1;
  double _endDifficulty = 5;
  bool _difficultySelected = false;

  final Map<int, String> difficultyDescriptions = {
    1: '10Î∞© ÎØ∏ÎßåÏóêÍ≤å Ï∂îÏ≤úÌïòÎäî ÎÇúÏù¥ÎèÑ',
    2: '10Î∞© Ïù¥ÏÉÅ 50Î∞© ÎØ∏ÎßåÏóêÍ≤å Ï∂îÏ≤úÌïòÎäî ÎÇúÏù¥ÎèÑ',
    3: '50Î∞© Ïù¥ÏÉÅ 100Î∞© ÎØ∏ÎßåÏóêÍ≤å Ï∂îÏ≤úÌïòÎäî ÎÇúÏù¥ÎèÑ',
    4: '100Î∞© Ïù¥ÏÉÅ 200Î∞© ÎØ∏ÎßåÏóêÍ≤å Ï∂îÏ≤úÌïòÎäî ÎÇúÏù¥ÎèÑ',
    5: '200Î∞© Ïù¥ÏÉÅÏóêÍ≤å Ï∂îÏ≤úÌïòÎäî ÎÇúÏù¥ÎèÑ',
  };

  @override
  Widget build(BuildContext context) {
    // final double sliderWidth = MediaQuery.of(context).size.width - 80;

    return SafeArea(
      child: Container(
        padding: const EdgeInsets.only(top: 20),
        decoration: const BoxDecoration(
          color: Colors.black,
          borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            /// Ï†úÎ™© Î∞è Îã´Í∏∞ Î≤ÑÌäº
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Row(
                  children: [
                    SizedBox(
                      width: 12,
                    ),
                    Text("ÎÇúÏù¥ÎèÑ",
                        style: TextStyle(
                            color: Colors.white,
                            fontSize: 20,
                            fontWeight: FontWeight.bold)),
                  ],
                ),
                IconButton(
                  padding: const EdgeInsets.only(bottom: 20, right: 25),
                  icon: const Icon(Icons.close, color: Colors.white),
                  alignment: const Alignment(-1, 1),
                  onPressed: () => Navigator.pop(context),
                )
              ],
            ),

            const Divider(color: Color(0xff363636)),
            const SizedBox(
              height: 25,
            ),

            /// ÎÇúÏù¥ÎèÑ ÏÑ§Î™Ö ÌÖçÏä§Ìä∏
            ...difficultyDescriptions.entries.map((entry) => Padding(
                  padding: const EdgeInsets.symmetric(
                    vertical: 6,
                  ),
                  child: Row(
                    children: [
                      const SizedBox(
                        width: 50,
                      ),
                      Image.asset(
                        'assets/icon/puzzle_red.png',
                        width: 20,
                        color: const Color(0xffD90206),
                      ),
                      const SizedBox(width: 10),
                      Text(
                        "${entry.key}  :  ${entry.value}",
                        style:
                            const TextStyle(color: Colors.white, fontSize: 13),
                      )
                    ],
                  ),
                )),

            const SizedBox(height: 30),

            /// ÌçºÏ¶ê + Ïä¨ÎùºÏù¥Îçî (Stack)
            SizedBox(
              height: 100, // ‚Üê Stack ÎÜíÏù¥ Ï∂©Î∂ÑÌûà ÌôïÎ≥¥
              child: LayoutBuilder(
                builder: (context, constraints) {
                  final sliderWidth =
                      constraints.maxWidth - 40; // 20 padding * 2

                  return Stack(
                    alignment: Alignment.center,
                    children: [
                      /// RangeSlider
                      Padding(
                        padding: const EdgeInsets.symmetric(horizontal: 20.0),
                        child: SliderTheme(
                          data: SliderTheme.of(context).copyWith(
                            thumbColor: Colors.white, // üî• Ïª§ÏÑú(thumb) ÏÉâÏÉÅ
                            // overlayColor: Colors.white.withOpacity(0.2),
                            // thumbShape: RoundSliderThumbShape(
                            //   // enabledThumbRadius: 8,
                            //   elevation: 2,
                            // ),
                            trackHeight: 4,
                            activeTrackColor: const Color(0xffD90206),
                            inactiveTrackColor: Colors.white30,
                            // overlayShape:
                            //     RoundSliderOverlayShape(overlayRadius: 16),
                          ),
                          child: RangeSlider(
                            values:
                                RangeValues(_startDifficulty, _endDifficulty),
                            min: 1,
                            max: 5,
                            divisions: 4,
                            // labels: RangeLabels(
                            //   _startDifficulty.round().toString(),
                            //   _endDifficulty.round().toString(),
                            // ),
                            onChanged: (values) {
                              setState(() {
                                _startDifficulty = values.start.roundToDouble();
                                _endDifficulty = values.end.roundToDouble();
                                _difficultySelected = true;
                              });
                              debugPrint('selected : $_difficultySelected');
                            },
                          ),
                        ),
                      ),

                      /// ÏãúÏûë ÌçºÏ¶ê ÏïÑÏù¥ÏΩò + Ïà´Ïûê
                      Positioned(
                        left:
                            30 + (_startDifficulty - 1) / 4 * sliderWidth - 10,
                        bottom: 60,
                        child: Row(
                          children: [
                            Image.asset(
                              'assets/icon/puzzle_red.png',
                              width: 24,
                              color: const Color(0xffD90206),
                            ),
                            const SizedBox(width: 4),
                            Text(
                              "${_startDifficulty.round()}",
                              style: const TextStyle(color: Colors.white),
                            ),
                          ],
                        ),
                      ),

                      /// ÎÅù ÌçºÏ¶ê ÏïÑÏù¥ÏΩò + Ïà´Ïûê
                      Positioned(
                        left: 0 + (_endDifficulty - 1) / 4 * sliderWidth - 10,
                        bottom: 60,
                        child: Row(
                          children: [
                            Image.asset(
                              'assets/icon/puzzle_red.png',
                              width: 24,
                              color: const Color(0xffD90206),
                            ),
                            const SizedBox(width: 4),
                            Text(
                              "${_endDifficulty.round()}",
                              style: const TextStyle(color: Colors.white),
                            ),
                          ],
                        ),
                      ),
                    ],
                  );
                },
              ),
            ),
            const SizedBox(height: 30),

            /// ÏôÑÎ£å Î≤ÑÌäº
            // Container(
            //   width: double.infinity,
            //   padding: EdgeInsets.symmetric(vertical: 16),
            //   alignment: Alignment.center,
            //   child: ElevatedButton(
            //     style: ElevatedButton.styleFrom(
            //       backgroundColor:
            //           _difficultySelected ? Color(0xffD90206) : Color(0xff515151),
            //     ),
            //     onPressed:
            //         _difficultySelected ? () => Navigator.pop(context) : null,
            //     child: Text("ÏÑ†ÌÉù ÏôÑÎ£å",
            //         style: TextStyle(
            //             color: Colors.white, fontWeight: FontWeight.bold)),
            //   ),
            // ),
            // ‚úÖ ÎÇúÏù¥ÎèÑ ÏÑ†ÌÉù ÏôÑÎ£å Î≤ÑÌäº
            // ‚úÖ ÎÇúÏù¥ÎèÑ ÏÑ†ÌÉù ÏôÑÎ£å Î≤ÑÌäº
            GestureDetector(
              onTap: _difficultySelected
                  ? () async {
                      final minLevel = _startDifficulty;
                      final maxLevel = _endDifficulty;

                      final filterProvider =
                          Provider.of<FilterProvider>(context, listen: false);
                      final filterThemeProvider =
                          Provider.of<FilterThemeProvider>(context,
                              listen: false);
                      final searchThemeProvider =
                          Provider.of<SearchThemeProvider>(context,
                              listen: false);
                      if (minLevel == 1 && maxLevel == 5) {
                        filterProvider.setLevel(null, null);
                        Navigator.pop(context, 'ÎÇúÏù¥ÎèÑ'); // üéØ ÎÇúÏù¥ÎèÑ Ï¥àÍ∏∞Ìôî
                      } else {
                        filterProvider.setLevel(minLevel, maxLevel);
                        !Provider.of<SearchThemeProvider>(context,
                                    listen: false)
                                .isSearching
                            ? {
                                debugPrint('ÎÇúÏù¥ÎèÑ ÌïÑÌÑ∞ Ï†ÅÏö©'),
                                await filterThemeProvider
                                    .fetchFilteredThemes(filterProvider),
                              }
                            : {
                                debugPrint('ÎÇúÏù¥ÎèÑ Í≤ÄÏÉâ ÌïÑÌÑ∞ Ï†ÅÏö©'),
                                await searchThemeProvider.searchThemes(
                                    date: searchThemeProvider.selectedDate,
                                    filterProvider: filterProvider)
                              };
                        Navigator.pop(context,
                            '${minLevel.round()} ~ ${maxLevel.round()}'); // üéØ ÎÇúÏù¥ÎèÑ Î≤îÏúÑ ÎÑòÍ∏¥Îã§
                      }
                    }
                  : null,
              child: Container(
                width: double.infinity,
                padding: const EdgeInsets.symmetric(vertical: 16),
                alignment: Alignment.center,
                color: _difficultySelected
                    ? const Color(0xffD90206)
                    : const Color(0xff515151),
                child: const Text('ÏÑ†ÌÉù ÏôÑÎ£å',
                    style: TextStyle(
                        color: Colors.white, fontWeight: FontWeight.bold)),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
